### LICENSE BSD ###
# Copyright (c) 2024, Platform Support - Abiquo
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Abiquo nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDER BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
###
#
# This script creates needed scripts in order to configure dhcp server for Abiquo purpouses:
# https://abiquo.atlassian.net/wiki/spaces/doc/pages/311374918/Configuring+a+DHCP+server
##

import getopt
import sys
import os

def create_vlans_script(service_interface, vlan_range, service_network):
    minvlan = 0
    maxvlan = 0
    numvlans = 0
    loops = 0
    residual = 0

    try:
        minvlan = int(vlan_range.split('-')[0])
        maxvlan = int(vlan_range.split('-')[1])
        numvlans = maxvlan - minvlan + 1
        loops = numvlans // 254
        residual = numvlans % 254
    except Exception as e:
        print("\nError parsing vlans range.\n", str(e))
        sys.exit(2)

    # Generate script for creating vlans and config dhcpd
    try:
        with open("vlans-config", "w") as f:
            data = "#!/bin/bash\n\n"
            data += '# Abiquo Dhcp server config. Vlans generation.\n'
            data += '#\n'
            data += '# chkconfig: 2345 64 34\n'
            data += '# description: Create vlan interfaces and assign ip.\n'
            data += '#               Script generated by Abiquo DHCPD config script\n'
            f.write(data)
            
            data = '\nstart() {\n'
            data += '    echo "Starting VLAN subinterfaces: "\n'
            # Vlans creation
            if loops:
                for i in range(0, int(loops)):
                    for j in range(1, 255):
                        vlan = i * 254 + j - 1 + minvlan
                        data += f'    ip link add link {service_interface} name {service_interface}.{vlan} type vlan id {vlan}\n'
                        data += f'    ip addr add {service_network.split(".")[0]}.{service_network.split(".")[1]}.{service_network.split(".")[2]}.{j} dev {service_interface}.{vlan}\n'
                        data += f'    ip link set dev {service_interface}.{vlan} up\n'
            if residual:
                for i in range(1, int(residual) + 1):
                    vlan = loops * 254 + i - 1 + minvlan
                    data += f'    ip link add link {service_interface} name {service_interface}.{vlan} type vlan id {vlan}\n'
                    data += f'    ip addr add {service_network.split(".")[0]}.{service_network.split(".")[1]}.{service_network.split(".")[2]}.{i} dev {service_interface}.{vlan}\n'
                    data += f'    ip link set dev {service_interface}.{vlan} up\n'
            
            data += '}\n'
            f.write(data)

            # Stop
            data = '\nstop() { \n'
            data += '    echo "Stopping VLAN subinterfaces: "\n'
            data += f'    for i in $(seq {minvlan} {maxvlan}); do\n'
            data += f'        ip link delete {service_interface}.$i\n'
            data += '    done\n'
            data += '}\n'
            f.write(data)

            # Restart
            data = '\nrestart() {\n'
            data += '    stop\n'
            data += '    start\n'
            data += '}\n'
            f.write(data)

            # Script logic
            data = '\ncase "$1" in\n'
            data += '  start)\n'
            data += '      start\n'
            data += '    ;;\n'
            data += '  stop)\n'
            data += '      stop\n'
            data += '    ;;\n'
            data += '  restart)\n'
            data += '      restart\n'
            data += '    ;;\n'
            data += '  *)\n'
            data += '    echo $"Usage: $0 {start|stop|restart}"\n'
            data += '    exit 1\n'
            data += 'esac\n'
            f.write(data)
        
        os.system("chmod +x vlans-config")
    
    except Exception as e:
        print("\nError creating vlans-config.\n", str(e))
        sys.exit(2)

def create_dhcpd_config(vlan_range, service_interface):
    minvlan = int(vlan_range.split('-')[0])
    maxvlan = int(vlan_range.split('-')[1])

    # DHCPD config
    with open("dhcpd", "w") as f:
        data = '# Generated by Abiquo DHCPD config script\n'
        data += '\nDHCPDARGS="'
        for i in range(minvlan, maxvlan+1):
            data += f' {service_interface}.{i}'
        data += '"'
        f.write(data)

def usage():
    print("Usage: abiquo-dhcpd-config.py [OPTIONS]...")
    print("Creates configuration files and start scripts for the dhcp server and vlans.\n")
    print("-h\t--help\t\t\t\tThis help screen.")
    print("-s\t--service-interface=INTERFACE\tInterface of the service network interface, where VLANs will be created.")
    print("-v\t--vlan-range=VLANRANGE\t\tVLAN range (e.g. 2-200).")
    print("-n\t--service-network=IP\t\tNetwork available for service network interfaces (has to finish in 0).")
    print("")

def main():
    service_interface = None
    vlan_range = None
    service_network = None

    try:
        opts, args = getopt.getopt(sys.argv[1:], "hs:v:n:", ["help", "service-interface=", "vlan-range=", "service-network="])
    except getopt.GetoptError as err:
        print(str(err))
        sys.exit(2)

    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o in ("-s", "--service-interface"):
            service_interface = a
        elif o in ("-v", "--vlan-range"):
            vlan_range = a
        elif o in ("-n", "--service-network"):
            service_network = a

    if not (service_interface and vlan_range and service_network) or service_network.split(".")[3] != "0":
        usage()
        return

    print("-- Generating file --\n")

    # Vlans script
    print(" * vlans-config\t\tScript to generate VLANs and assign IPs")
    create_vlans_script(service_interface, vlan_range, service_network)

    # DHCPD config
    print(" * dhcpd\t\tScript to configure dhcpd listen interfaces")
    create_dhcpd_config(vlan_range, service_interface)

    print("\n-- End --\n")

if __name__ == "__main__":
    main()
